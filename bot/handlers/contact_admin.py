from aiogram import types
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from data.models import get_admins
from data.languages import translate
from data.tg_bot import bot
from db_api.database import get_account_by_username, get_account, Users


class ContactAdminState(StatesGroup):
    awaiting_message = State()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –∞–¥–º–∏–Ω—É
async def start_contact_admin(message: types.Message, state: FSMContext, user_locale: str):
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–º–µ–Ω—ã
    cancel_button = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text=translate("cancel", user_locale))]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await message.reply(translate("contact_admin_prompt", user_locale), reply_markup=cancel_button, parse_mode="HTML")
    await state.set_state(ContactAdminState.awaiting_message)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
async def send_message_to_admin(message: types.Message, state: FSMContext, user_locale: str):
    admins = get_admins()

    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_info = (
        f"@{message.from_user.username}" if message.from_user.username
        else f"ID: {message.from_user.id}, {message.from_user.first_name or ''} {message.from_user.last_name or ''}"
    )
    admin_message = f"{translate('message_from_user', user_locale)} {user_info}:\n\n{message.text}"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –∞–¥–º–∏–Ω—É
    for admin_id in admins:
        try:
            await bot.send_message(admin_id, admin_message, parse_mode="HTML")
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É {admin_id}: {e}")

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await message.reply(translate("message_sent_to_admin", user_locale), parse_mode="HTML")
    await state.clear()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def admin_reply_handler(message: types.Message, user_locale: str, user_object: Users):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —è–≤–ª—è–µ—Ç—Å—è –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        return

    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    original_message = message.reply_to_message
    if not original_message.text:
        await message.reply(translate("original_message_empty", user_locale))
        return

    # –ò–∑–≤–ª–µ–∫–∞–µ–º —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –∏–∑ entities
    user = None
    if original_message.entities:
        for entity in original_message.entities:
            if entity.type == "mention":  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                username = original_message.text[entity.offset:entity.offset + entity.length]
                user = await get_account_by_username(username.strip("@"))
                break

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –Ω–∞–ª–∏—á–∏–µ ID
    if not user:
        if "ID:" in original_message.text:
            try:
                user_id = int(original_message.text.split("ID:")[1].split(",")[0].strip())
                user = await get_account(user_id)
            except ValueError:
                await message.reply(translate("invalid_user_id", user_locale))
                return

    if not user:
        await message.reply(translate("user_not_found", user_locale))
        return

    response_text = (
        f"üì© {translate('response_from_admin', user.user_language)} @{user_object.user_name}:\n\n"
        f"{message.text}\n\n"
        f"**{translate('reply_to_admin_prompt', user.user_language)}**"
    )

    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await bot.send_message(user.user_id, response_text, parse_mode="HTML")
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        await message.reply(translate("message_sent_to_user", user_locale), parse_mode="HTML")
    except Exception as e:
        await message.reply(translate("failed_to_send_message", user_locale) + f": {e}")
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user.user_id}: {e}")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
async def reply_handler(message: types.Message, user_locale: str):
    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
    admins = get_admins()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ –¥—Ä—É–≥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if not message.reply_to_message:
        return

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    original_message = message.reply_to_message
    if not original_message.text:
        await message.reply(translate("original_message_empty", user_locale))
        return

    # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ username –∏–∑ —Ç–µ–∫—Å—Ç–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    original_author_id = None
    original_author_username = None

    if "@" in original_message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ username
        try:
            original_author_username = original_message.text.split("@")[1].split(":")[0].strip()
            user = await get_account_by_username(original_author_username)
            if user:
                original_author_id = user.user_id
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ username: {e}")

    elif "ID:" in original_message.text:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ID
        try:
            original_author_id = int(original_message.text.split("ID:")[1].split(",")[0].strip())
        except ValueError:
            await message.reply(translate("invalid_user_id", user_locale))
            return

    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–∏ ID, –Ω–∏ username
    if not original_author_id:
        await message.reply(translate("user_not_found", user_locale))
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –∞–≤—Ç–æ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
    original_author_role = "user" if original_author_id in admins else "admin"

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–æ–º—É –Ω—É–∂–Ω–æ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –æ—Ç–≤–µ—Ç: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    if original_author_role == "admin":
        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —Ç–æ –æ—Ç–≤–µ—Ç –∏–¥–µ—Ç –∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        target_user_id = original_author_id if original_author_id != message.from_user.id else None

        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–∞–º–æ–º—É —Å–µ–±–µ
        if not target_user_id:
            await message.reply(translate("cannot_reply_self", user_locale))
            return

        target_user = await get_account(target_user_id)
        if not target_user:
            await message.reply(translate("user_not_found", user_locale))
            return

        target_user_language = target_user.user_language

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        response_text = (
            f"üì© {translate('response_from_admin', target_user_language)} @{message.from_user.username}:\n\n"
            f"{message.text}\n\n"
            f"<i>{translate('reply_to_admin_prompt', target_user_language)}</i>"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await bot.send_message(target_user_id, response_text, parse_mode="HTML")
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.reply(translate("message_sent_to_user", user_locale), parse_mode="HTML")
        except Exception as e:
            await message.reply(translate("failed_to_send_message", user_locale) + f": {e}")
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {target_user_id}: {e}")

    elif original_author_role == "user":
        # –ï—Å–ª–∏ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —Ç–æ –æ—Ç–≤–µ—Ç –∏–¥–µ—Ç –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
        target_user_id = original_author_id

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ª—É—á–∞–π, –µ—Å–ª–∏ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —Ä–∞–≤–µ–Ω ID –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è (–∏—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å–∞–º–æ–º—É —Å–µ–±–µ)
        if target_user_id == message.from_user.id:
            await message.reply(translate("cannot_reply_self", user_locale))
            return

        target_user = await get_account(target_user_id)
        if not target_user:
            await message.reply(translate("user_not_found", user_locale))
            return

        target_user_language = target_user.user_language

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        response_text = (
            f"üì® {translate('reply_from_user', target_user_language)} @{message.from_user.username}:\n\n"
            f"{message.text}\n\n"
            f"<i>{translate('reply_to_user_prompt', target_user_language)}</i>"
        )

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await bot.send_message(target_user_id, response_text, parse_mode="HTML")
            # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
            await message.reply(translate("message_sent_to_admin", user_locale), parse_mode="HTML")
        except Exception as e:
            await message.reply(translate("failed_to_send_message", user_locale) + f": {e}")
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É {target_user_id}: {e}")
